// Generated by purs version 0.11.7
"use strict";
var Breakout_Types = require("../Breakout.Types");
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Data_Array = require("../Data.Array");
var Data_Eq = require("../Data.Eq");
var Data_EuclideanRing = require("../Data.EuclideanRing");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_HeytingAlgebra = require("../Data.HeytingAlgebra");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_Traversable = require("../Data.Traversable");
var Data_Unit = require("../Data.Unit");
var Halogen_VDom = require("../Halogen.VDom");
var Prelude = require("../Prelude");
var PrestoDOM_Core = require("../PrestoDOM.Core");
var PrestoDOM_Elements = require("../PrestoDOM.Elements");
var PrestoDOM_Properties = require("../PrestoDOM.Properties");
var PrestoDOM_Util = require("../PrestoDOM.Util");
var renderEntity = function (entityId) {
    return function (bgColor) {
        return function (radius) {
            return function (entity) {
                return PrestoDOM_Elements.linearLayout([ PrestoDOM_Properties.id_(entityId), PrestoDOM_Properties.margin(Data_Show.show(Data_Show.showInt)(entity.x) + ("," + (Data_Show.show(Data_Show.showInt)(entity.y) + ",0,0"))), PrestoDOM_Properties.width(Data_Show.show(Data_Show.showInt)(entity.w)), PrestoDOM_Properties.height(Data_Show.show(Data_Show.showInt)(entity.h)), PrestoDOM_Properties.background(bgColor), PrestoDOM_Properties.cornerRadius(Data_Show.show(Data_Show.showInt)(radius)) ])([  ]);
            };
        };
    };
};
var renderPaddle = renderEntity("paddle")("#888")(5);
var renderBrick = function (brick) {
    return renderEntity("brick" + (Data_Show.show(Data_Show.showInt)(brick.x) + Data_Show.show(Data_Show.showInt)(brick.y)))("#888")(5)(brick);
};
var renderBall = renderEntity("ball")("#999")(360);
var renderPlayScreen = function (state) {
    return PrestoDOM_Elements.relativeLayout([ PrestoDOM_Properties.id_("world"), PrestoDOM_Properties.width("match_parent"), PrestoDOM_Properties.height("match_parent") ])([ renderPaddle(state.paddle), renderBall(state.ball), PrestoDOM_Elements.relativeLayout([ PrestoDOM_Properties.id_("bricks"), PrestoDOM_Properties.width("match_parent"), PrestoDOM_Properties.height("match_parent") ])(Data_Functor.map(Data_Functor.functorArray)(renderBrick)(state.bricks)) ]);
};
var intersects = function (a) {
    return function (b) {
        return !(a.x > (b.x + b.w | 0) || b.x > (a.x + a.w | 0)) && !(a.y > (b.y + b.h | 0) || b.y > (a.y + a.h | 0));
    };
};
var getIntersectionWidth = function (a) {
    return function (b) {
        var bx2 = b.x + b.w | 0;
        var ax2 = a.x + a.w | 0;
        var $33 = ax2 > bx2;
        if ($33) {
            return bx2 - a.x | 0;
        };
        return ax2 - b.x | 0;
    };
};
var getIntersectionHeight = function (a) {
    return function (b) {
        var by2 = b.y + b.h | 0;
        var ay2 = a.y + a.h | 0;
        var $34 = ay2 > by2;
        if ($34) {
            return by2 - a.y | 0;
        };
        return ay2 - b.y | 0;
    };
};
var bounce = function (other) {
    return function __do() {
        var v = PrestoDOM_Util.getState();
        var iw = getIntersectionWidth(v.ball)(other);
        var ih = getIntersectionHeight(v.ball)(other);
        var v1 = (function () {
            var $36 = iw >= ih;
            if ($36) {
                return PrestoDOM_Util.updateState("ballSpeedY")(-v.ballSpeedY | 0);
            };
            return PrestoDOM_Util.getState;
        })()();
        var v2 = (function () {
            var $37 = iw <= ih;
            if ($37) {
                return PrestoDOM_Util.updateState("ballSpeedX")(-v.ballSpeedX | 0);
            };
            return PrestoDOM_Util.getState;
        })()();
        var v3 = (function () {
            var $38 = iw >= ih;
            if ($38) {
                var $39 = v.ball.y > other.y;
                if ($39) {
                    return PrestoDOM_Util.updateState("ball")((function () {
                        var $40 = {};
                        for (var $41 in v.ball) {
                            if ({}.hasOwnProperty.call(v.ball, $41)) {
                                $40[$41] = v["ball"][$41];
                            };
                        };
                        $40.y = v.ball.y + ih | 0;
                        return $40;
                    })());
                };
                return PrestoDOM_Util.updateState("ball")((function () {
                    var $43 = {};
                    for (var $44 in v.ball) {
                        if ({}.hasOwnProperty.call(v.ball, $44)) {
                            $43[$44] = v["ball"][$44];
                        };
                    };
                    $43.y = v.ball.y - ih | 0;
                    return $43;
                })());
            };
            return PrestoDOM_Util.getState;
        })()();
        var v4 = (function () {
            var $46 = iw <= ih;
            if ($46) {
                var $47 = v.ball.x > other.x;
                if ($47) {
                    return PrestoDOM_Util.updateState("ball")((function () {
                        var $48 = {};
                        for (var $49 in v.ball) {
                            if ({}.hasOwnProperty.call(v.ball, $49)) {
                                $48[$49] = v["ball"][$49];
                            };
                        };
                        $48.x = v.ball.x - iw | 0;
                        return $48;
                    })());
                };
                return PrestoDOM_Util.updateState("ball")((function () {
                    var $51 = {};
                    for (var $52 in v.ball) {
                        if ({}.hasOwnProperty.call(v.ball, $52)) {
                            $51[$52] = v["ball"][$52];
                        };
                    };
                    $51.x = v.ball.x + iw | 0;
                    return $51;
                })());
            };
            return PrestoDOM_Util.getState;
        })()();
        return Data_Unit.unit;
    };
};
var checkBrickCollision = function (brick) {
    return function __do() {
        var v = PrestoDOM_Util.getState();
        var $55 = intersects(brick)(v.ball);
        if ($55) {
            return Control_Apply.applySecond(Control_Monad_Eff.applyEff)(Control_Apply.applySecond(Control_Monad_Eff.applyEff)(PrestoDOM_Util.updateState("score")(v.score + 1 | 0))(bounce(brick)))(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                var $56 = {};
                for (var $57 in brick) {
                    if ({}.hasOwnProperty.call(brick, $57)) {
                        $56[$57] = brick[$57];
                    };
                };
                $56.dead = true;
                return $56;
            })()))();
        };
        var $59 = {};
        for (var $60 in brick) {
            if ({}.hasOwnProperty.call(brick, $60)) {
                $59[$60] = brick[$60];
            };
        };
        $59.dead = false;
        return $59;
    };
};
var updatePlayScreen = function __do() {
    var v = PrestoDOM_Util.getState();
    var v1 = (function () {
        if (v.keyLeft) {
            return PrestoDOM_Util.updateState("paddle")((function () {
                var $64 = {};
                for (var $65 in v.paddle) {
                    if ({}.hasOwnProperty.call(v.paddle, $65)) {
                        $64[$65] = v["paddle"][$65];
                    };
                };
                $64.x = v.paddle.x - 4 | 0;
                return $64;
            })());
        };
        return PrestoDOM_Util.getState;
    })()();
    var v2 = (function () {
        if (v.keyRight) {
            return PrestoDOM_Util.updateState("paddle")((function () {
                var $68 = {};
                for (var $69 in v.paddle) {
                    if ({}.hasOwnProperty.call(v.paddle, $69)) {
                        $68[$69] = v["paddle"][$69];
                    };
                };
                $68.x = v.paddle.x + 4 | 0;
                return $68;
            })());
        };
        return PrestoDOM_Util.getState;
    })()();
    var v3 = PrestoDOM_Util.updateState("paddle")((function () {
        var $71 = {};
        for (var $72 in v.paddle) {
            if ({}.hasOwnProperty.call(v.paddle, $72)) {
                $71[$72] = v["paddle"][$72];
            };
        };
        $71.x = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(v.paddle.x)(640 - v.paddle.w | 0))(0);
        return $71;
    })())();
    var v4 = (function () {
        var $74 = v.launched === false;
        if ($74) {
            return PrestoDOM_Util.updateState("ball")((function () {
                var $75 = {};
                for (var $76 in v.ball) {
                    if ({}.hasOwnProperty.call(v.ball, $76)) {
                        $75[$76] = v["ball"][$76];
                    };
                };
                $75.x = (v.paddle.x + (v.paddle.w / 2 | 0) | 0) - (v.ball.w / 2 | 0) | 0;
                $75.y = v.paddle.y - 30 | 0;
                return $75;
            })());
        };
        return PrestoDOM_Util.updateState("ball")((function () {
            var $78 = {};
            for (var $79 in v.ball) {
                if ({}.hasOwnProperty.call(v.ball, $79)) {
                    $78[$79] = v["ball"][$79];
                };
            };
            $78.x = v.ball.x + v.ballSpeedX | 0;
            $78.y = v.ball.y + v.ballSpeedY | 0;
            return $78;
        })());
    })()();
    var v5 = (function () {
        var $81 = v.ball.x <= 0 || (v.ball.x + v.ball.w | 0) >= 640;
        if ($81) {
            return PrestoDOM_Util.updateState("ballSpeedX")(-v.ballSpeedX | 0);
        };
        return PrestoDOM_Util.getState;
    })()();
    var v6 = (function () {
        var $82 = v.ball.y <= 0;
        if ($82) {
            return PrestoDOM_Util.updateState("ballSpeedY")(-v.ballSpeedY | 0);
        };
        return PrestoDOM_Util.getState;
    })()();
    var v7 = (function () {
        var $83 = intersects(v.ball)(v.paddle);
        if ($83) {
            return bounce(v.paddle);
        };
        return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
    })()();
    var v8 = (function () {
        var $84 = (v.ball.y + v.ball.h | 0) >= 480;
        if ($84) {
            return function __do() {
                var v8 = PrestoDOM_Util.updateState("launched")(false)();
                var v9 = PrestoDOM_Util.updateState("ballSpeedY")(-4 | 0)();
                var v10 = PrestoDOM_Util.updateState("lives")(v.lives - 1 | 0)();
                return Data_Unit.unit;
            };
        };
        return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
    })()();
    var v9 = Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(checkBrickCollision)(v.bricks)();
    var v10 = PrestoDOM_Util.updateState("bricks")(Data_Array.filter(function (brick) {
        return brick.dead === false;
    })(v9))();
    var v11 = (function () {
        var $86 = Data_Array.length(v.bricks) === 0;
        if ($86) {
            return PrestoDOM_Util.updateState("currentScreen")(Breakout_Types.YouWinScreen.value);
        };
        return PrestoDOM_Util.getState;
    })()();
    var v12 = (function () {
        var $87 = v.lives === 0;
        if ($87) {
            return PrestoDOM_Util.updateState("currentScreen")(Breakout_Types.GameOverScreen.value);
        };
        return PrestoDOM_Util.getState;
    })()();
    return Data_Unit.unit;
};
module.exports = {
    renderEntity: renderEntity,
    renderBrick: renderBrick,
    renderPaddle: renderPaddle,
    renderBall: renderBall,
    renderPlayScreen: renderPlayScreen,
    intersects: intersects,
    getIntersectionWidth: getIntersectionWidth,
    getIntersectionHeight: getIntersectionHeight,
    bounce: bounce,
    checkBrickCollision: checkBrickCollision,
    updatePlayScreen: updatePlayScreen
};
